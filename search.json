[
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck – Some decks",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards, not including jokers\n\n#for idx,r in enumerate(ranks):\n#    print(idx, r)\n\n#for r in range(0,14):\n#    print(ranks[r])\n\ndeck = Deck()\ndeck\n\nA♥; 2♥; 3♥; 4♥; 5♥; 6♥; 7♥; 8♥; 9♥; 10♥; J♥; Q♥; K♥; A♠; 2♠; 3♠; 4♠; 5♠; 6♠; 7♠; 8♠; 9♠; 10♠; J♠; Q♠; K♠; A♣; 2♣; 3♣; 4♣; 5♣; 6♣; 7♣; 8♣; 9♣; 10♣; J♣; Q♣; K♣; A♦; 2♦; 3♦; 4♦; 5♦; 6♦; 7♦; 8♦; 9♦; 10♦; J♦; Q♦; K♦\n\n\n\ntest_eq(len(deck),52)\n\n\ntest_eq??\n\nWe can check if the card is in the deck\n\nCard(1,1) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove a card from the deck, by its index, defaulting to the last one\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nthe index of the card to remove, defaulting to the last one\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(suit=3,rank=13))\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_cards.card.Card)\n\nRemove card from the deck\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nremove the passed card from the deck\n\n\n\n\ndeck = Deck()\ncard = Card(1,3)\ndeck.remove(card)\n\nassert card not in deck"
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card – A baisc playing card",
    "section": "",
    "text": "source\n\nCard\n\n Card (suit:int, rank:int)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nAn index into suits\n\n\nrank\nint\nAn index into ranks\n\n\n\n\nCard(1,3)\n\n3♠\n\n\n\n\nComparison operators\nEquiality, less than, greater than work on ranks and suit indicies\n\nsource\n\nCard.__eq__\n\n Card.__eq__ (other:__main__.Card)\n\nReturn self==value.\nA test for equality…\n\ntest_eq(Card(suit=1, rank=1), Card(suit=1, rank=1))\n\nSome tests for < …\n\nassert (Card(suit=1, rank=1) < Card(suit=1, rank=2))\n\nSome tests for > …\n\nassert (Card(suit=1, rank=2) > Card(suit=1, rank=1))\nassert not (Card(suit=1, rank=1) > Card(suit=1, rank=2))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_cards",
    "section": "Install",
    "text": "Install\npip install nbdev_cards"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2"
  }
]